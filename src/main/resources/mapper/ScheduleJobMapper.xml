<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.schedule.mapper.ScheduleJobMapper">
  <resultMap id="BaseResultMap" type="com.spring.schedule.pojo.ScheduleJob">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="cron_class" jdbcType="VARCHAR" property="cronClass" />
    <result column="cron_method" jdbcType="VARCHAR" property="cronMethod" />
    <result column="cron_expression" jdbcType="VARCHAR" property="cronExpression" />
    <result column="initialDelay" jdbcType="VARCHAR" property="initialdelay" />
    <result column="task_type" jdbcType="VARCHAR" property="taskType" />
    <result column="params" jdbcType="VARCHAR" property="params" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="desc" jdbcType="VARCHAR" property="desc" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, cron_class, cron_method, cron_expression, initialDelay, task_type, params, `status`, 
    `desc`
  </sql>
  <select id="selectByExample" parameterType="com.spring.schedule.pojo.ScheduleJobExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from schedule_job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from schedule_job
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from schedule_job
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.spring.schedule.pojo.ScheduleJob">
    insert into schedule_job (id, cron_class, cron_method, 
      cron_expression, initialDelay, task_type, 
      params, `status`, `desc`
      )
    values (#{id,jdbcType=INTEGER}, #{cronClass,jdbcType=VARCHAR}, #{cronMethod,jdbcType=VARCHAR}, 
      #{cronExpression,jdbcType=VARCHAR}, #{initialdelay,jdbcType=VARCHAR}, #{taskType,jdbcType=VARCHAR}, 
      #{params,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{desc,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.spring.schedule.pojo.ScheduleJob">
    insert into schedule_job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="cronClass != null">
        cron_class,
      </if>
      <if test="cronMethod != null">
        cron_method,
      </if>
      <if test="cronExpression != null">
        cron_expression,
      </if>
      <if test="initialdelay != null">
        initialDelay,
      </if>
      <if test="taskType != null">
        task_type,
      </if>
      <if test="params != null">
        params,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="desc != null">
        `desc`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="cronClass != null">
        #{cronClass,jdbcType=VARCHAR},
      </if>
      <if test="cronMethod != null">
        #{cronMethod,jdbcType=VARCHAR},
      </if>
      <if test="cronExpression != null">
        #{cronExpression,jdbcType=VARCHAR},
      </if>
      <if test="initialdelay != null">
        #{initialdelay,jdbcType=VARCHAR},
      </if>
      <if test="taskType != null">
        #{taskType,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        #{params,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="desc != null">
        #{desc,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.spring.schedule.pojo.ScheduleJobExample" resultType="java.lang.Long">
    select count(*) from schedule_job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update schedule_job
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cronClass != null">
        cron_class = #{record.cronClass,jdbcType=VARCHAR},
      </if>
      <if test="record.cronMethod != null">
        cron_method = #{record.cronMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.cronExpression != null">
        cron_expression = #{record.cronExpression,jdbcType=VARCHAR},
      </if>
      <if test="record.initialdelay != null">
        initialDelay = #{record.initialdelay,jdbcType=VARCHAR},
      </if>
      <if test="record.taskType != null">
        task_type = #{record.taskType,jdbcType=VARCHAR},
      </if>
      <if test="record.params != null">
        params = #{record.params,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.desc != null">
        `desc` = #{record.desc,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update schedule_job
    set id = #{record.id,jdbcType=INTEGER},
      cron_class = #{record.cronClass,jdbcType=VARCHAR},
      cron_method = #{record.cronMethod,jdbcType=VARCHAR},
      cron_expression = #{record.cronExpression,jdbcType=VARCHAR},
      initialDelay = #{record.initialdelay,jdbcType=VARCHAR},
      task_type = #{record.taskType,jdbcType=VARCHAR},
      params = #{record.params,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=INTEGER},
      `desc` = #{record.desc,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.spring.schedule.pojo.ScheduleJob">
    update schedule_job
    <set>
      <if test="cronClass != null">
        cron_class = #{cronClass,jdbcType=VARCHAR},
      </if>
      <if test="cronMethod != null">
        cron_method = #{cronMethod,jdbcType=VARCHAR},
      </if>
      <if test="cronExpression != null">
        cron_expression = #{cronExpression,jdbcType=VARCHAR},
      </if>
      <if test="initialdelay != null">
        initialDelay = #{initialdelay,jdbcType=VARCHAR},
      </if>
      <if test="taskType != null">
        task_type = #{taskType,jdbcType=VARCHAR},
      </if>
      <if test="params != null">
        params = #{params,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="desc != null">
        `desc` = #{desc,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.spring.schedule.pojo.ScheduleJob">
    update schedule_job
    set cron_class = #{cronClass,jdbcType=VARCHAR},
      cron_method = #{cronMethod,jdbcType=VARCHAR},
      cron_expression = #{cronExpression,jdbcType=VARCHAR},
      initialDelay = #{initialdelay,jdbcType=VARCHAR},
      task_type = #{taskType,jdbcType=VARCHAR},
      params = #{params,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      `desc` = #{desc,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>